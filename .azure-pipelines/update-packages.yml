pr: none
trigger: none

schedules:
- cron: "0 */12 * * *"
  displayName: Every 12 Hours
  branches:
    include:
      - master
  always: true

pool:
  vmImage: 'windows-latest'

variables:
  AU_MODULE_VERSION : 2019.5.22

steps:
- checkout: self
  persistCredentials: true
  clean: true
- task: ChocolateyToolInstaller@0
  displayName: 'Install Chocolatey'
- task: Cache@2
  displayName: 'Cache AU PowerShell module'
  name: cache_psmodule
  inputs:      
    key: PSMODULE | "AU" | "$(AU_MODULE_VERSION)"
    cacheHitVar: cache_hit
    path: $(Pipeline.Workspace)\PSModules
- powershell: |
    # Install-Module -Name au -RequiredVersion $(AU_MODULE_VERSION) -Scope CurrentUser -Force
    Find-Module -Name au -RequiredVersion $(AU_MODULE_VERSION) -Repository 'PSGallery' | Save-Module -Path '$(Pipeline.Workspace)\PSModules' -Force
    Import-Module -FullyQualifiedName '$(Pipeline.Workspace)\PSModules\AU'
  condition: and(succeeded(), ne(variables.cache_psmodule.cache_hit, true))
  displayName: 'Install the AU Powershell Module'  
- task: PowerShell@2
  displayName: 'Check for WVD Agent Package Updates'
  inputs:
    filePath: '$(Build.SourcesDirectory)\wvd-agent\update.ps1'
    workingDirectory: '$(Build.SourcesDirectory)\wvd-agent\'
- task: ChocolateyCommand@0
  displayName: 'Publish WVD Agent Package Updates'
  inputs:
    command: 'push'
    pushOperation: 'multiple'
    pushWorkingDirectory: '$(Build.SourcesDirectory)\wvd-agent\'
    chocolateySourceType: 'manual'
    pushApikey: '$(ChocoAPIKey)'
- task: PowerShell@2
  displayName: 'Check for WVD Bootloader Package Updates'
  inputs:
    filePath: '$(Build.SourcesDirectory)\wvd-boot-loader\update.ps1'
    workingDirectory: '$(Build.SourcesDirectory)\wvd-boot-loader\'
- task: ChocolateyCommand@0
  displayName: 'Publish WVD Bootloader Package Updates'
  inputs:
    command: 'push'
    pushOperation: 'multiple'
    pushWorkingDirectory: '$(Build.SourcesDirectory)\wvd-boot-loader\'
    chocolateySourceType: 'manual'
    pushApikey: '$(ChocoAPIKey)'
- task: PowerShell@2
  displayName: 'Git Commit & Push Changes'
  inputs:
    targetType: 'inline'
    script: |
      # Set Git Config
      git config --global user.email "ChocolateyPackages@local.net"
      git config --global user.name "ChocolateyPackages Build Service Account"
      
      # Git Checkout master branch
      git checkout master

      # Add nuspec files as they may have changed
      git add $(Build.SourcesDirectory)\wvd-agent\wvd-agent.nuspec
      git add $(Build.SourcesDirectory)\wvd-boot-loader\wvd-boot-loader.nuspec

      # Have any local changes been staged
      git diff --staged --quiet

      if($LastExitCode -eq 1)
      {
          git commit -m "Azure Pipeline Auto Package Update"
          git push
      }
      else
      {
          Write-Output "No Staged Changes"
      }